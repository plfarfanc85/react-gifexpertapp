{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","console","log","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","divRoot","document","querySelector","ReactDOM","render"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAgBhD,OAEE,aADA,CACA,QAAMC,SAXa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAMhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAhBhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,+BCNdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,0FAC0EC,UAC7FH,GAFmB,qBAIFI,MAAMF,GAJJ,cAIfG,EAJe,gBAKEA,EAAKC,KAAKD,GALZ,uBAKbE,EALa,EAKbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAItCa,QAAQC,IAAI,SAfS,kBAiBdR,GAjBc,4CAAH,sDCCPS,EAAc,SAAC,GAAuB,EAArBN,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACvC,OACE,sBAAKgB,UAAU,yCAAf,UACE,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAIA,QCAGS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECAb,SAACA,GAAc,IAAD,EACdd,mBAAS,CACjCqB,KAAM,GACNe,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAgBxC,OATAC,qBAAU,WACR1B,EAAQC,GAAU0B,MAAK,SAACC,GACtBH,EAAS,CACPjB,KAAMoB,EACNL,SAAS,SAGZ,CAACtB,IAEGuB,EDb2BK,CAAa5B,GAAjCa,EAHyB,EAG/BN,KAAce,EAHiB,EAGjBA,QA6BtB,OACE,qCACE,6BAAKtB,IAEJsB,GAAW,wCACZ,qBAAKJ,UAAU,YAAf,SACGL,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEzCnBkB,EAAe,WAAO,IAAD,EACI3C,mBAAS,CAAC,cADd,mBACzB4C,EADyB,KACb7C,EADa,KAShC,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAIA,6BACG6C,EAAWrB,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCjBlB+B,G,MAAUC,SAASC,cAAc,UAEvCC,IAASC,OAAO,cAAC,EAAD,IAAkBJ,K","file":"static/js/main.d3b0df20.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (inputValue.trim().length > 2) {\n      setCategories((cats) => [inputValue, ...cats]);\n      setInputValue(\"\");\n    }\n  };\n\n  return (\n    /* Siempre se debe retornar un elemento que agrupe a los demas */\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n","// Esta funcion no regresa directamente los gifs, regresa una promesa que resuelve la colecciÃ³n de las imagenes\nexport const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=fXJl8NyS20N9vkX80Z4yy43VovN4yqjo&q=${encodeURI(\n    category\n  )}&limit=3`;\n  const resp = await fetch(url);\n  const { data } = await resp.json(resp);\n\n  const gifs = data.map((img) => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url,\n    };\n  });\n\n  console.log(\"entra\");\n\n  return gifs;\n};\n","import React from \"react\";\n\nexport const GifGridItem = ({ id, title, url }) => {\n  return (\n    <div className=\"card animate__animated animate__bounce\">\n      <img src={url} alt={title}></img>\n      <p>{title}</p>\n    </div>\n  );\n};\n","//import React, { useEffect, useState } from \"react\";\nimport React from \"react\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\n//import { getGifs } from \"../helpers/getGifs\";\nimport { GifGridItem } from \"./GifGridItem\";\n\nexport const GifGrid = ({ category }) => {\n  // Que se ejecute getGifs() solo cuando el componente es rederisado por primera vez\n  //const [images, setImages] = useState([]);\n  const { data: images, loading } = useFetchGifs(category);\n\n  /*\n  useEffect(() => {\n    getGifs(category).then(setImages);\n  }, [category]);\n  */\n\n  /*\n   const getGifs = async () => {\n     const url = `https://api.giphy.com/v1/gifs/search?api_key=fXJl8NyS20N9vkX80Z4yy43VovN4yqjo&q=${encodeURI(\n       category\n     )}&limit=10`;\n     const resp = await fetch(url);\n     const { data } = await resp.json(resp);\n\n     const gifs = data.map((img) => {\n       return {\n         id: img.id,\n         title: img.title,\n         url: img.images?.downsized_medium.url,\n       };\n     });\n\n     console.log(gifs);\n     setImages(gifs);\n   };\n   */\n\n  return (\n    <>\n      <h3>{category}</h3>\n      {/* {loading ? \"Cargando .....\" : \"Data cargada\"} */}\n      {loading && <p>Loading</p>}\n      <div className=\"card-grid\">\n        {images.map((img) => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </div>\n    </>\n  );\n};\n","import { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\n// los custome hooks funcionana como si fueran functional components\n// ayuda que los componentes no esten tan cargados\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  // ejemplo del boton en el componente\n  useEffect(() => {\n    getGifs(category).then((imgs) => {\n      setState({\n        data: imgs,\n        loading: false,\n      });\n    });\n  }, [category]);\n\n  return state;\n};\n","import React, { useState } from \"react\";\nimport { AddCategory } from \"./components/AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\n\nexport const GifExpertApp = () => {\n  const [categories, setCategories] = useState([\"One Punch\"]);\n\n  /*\n  const handleAdd = () => {\n    setCategories([...categories, \"HunterXHunter\"]);\n  };\n  */\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr></hr>\n\n      {/*<button onClick={handleAdd}>Agregar</button>*/}\n\n      <ol>\n        {categories.map((category) => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </ol>\n    </>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { GifExpertApp } from \"./GifExpertApp\";\n\nimport \"./index.css\";\n\nconst divRoot = document.querySelector(\"#root\");\n\nReactDOM.render(<GifExpertApp />, divRoot);\n"],"sourceRoot":""}